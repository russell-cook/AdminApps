<script type="text/javascript">

    // initialize global variable to track selected task, for use by indent/outdent functions
    //var selectedTaskId = null;

    // enable dataProcessor for automatic saving
    var dp = new dataProcessor("/ProjectScheduleVersions/Save/" + @Model.ProjectScheduleVersion.ID + "?projectId=" + @Model.ID);
    dp.init(gantt); // initialize DataProcessor

    // routine for syncing server-side SortOrder with client-side 'order'
    function syncSortOrder() {
        dp.setUpdateMode("off"); // temporarily disable auto-saving via dp
        var tasks = gantt.getTaskByTime(); // get all GanttTasks
        var closedTasks = []; // initialize new array for tracking 'closed' (i.e. collapsed) branches of the task tree
        for(var i = 0; i < tasks.length; i++){
            var task = tasks[i];
            if (!task.open && gantt.hasChild(task.id)) // if task is closed, and it has child tasks...
            {
                closedTasks.push(task.id); // ...add it to the closedTasks array...
                task.reorder = true; // set 'reorder' flag so that it blocks the onTaskOpened event listener
                gantt.open(task.id); // ...and then open the task to facilitate client-side SortOrder numbering using getGlobalTaskIndex. NOTE: this fires the onTaskOpened event listener
            }
        }
        for(var i = 0; i < tasks.length; i++){
            var task = tasks[i];
            var globalIndex = gantt.getGlobalTaskIndex(task.id); // now that all branches are open, get global task index
            if (task.order != globalIndex) // if stored SortOrder is different than global task index...
            {
                task.order = globalIndex; // ...update task order based on global index...
                gantt.updateTask(task.id); // and mark the record for updating in the database
            }
        }
        for(var i = 0; i < closedTasks.length; i++){ // close branches of tasks stored in closedTasks array to restore view state
            var taskId = closedTasks[i];
            gantt.close(taskId); // NOTE: this fires the onTaskClosed event listener, hence the need for the 'reorder' flag
            task.reorder = false; // reset 'reorder' flag to un-block the onTaskClosed event listener
        }
        dp.sendData(); // manual call for dp update
        dp.setUpdateMode("cell"); // re-instate auto saving via dp
        //gantt.render(); // refresh view to ensure that parent indents don't get out of sync after drag (order_branch_free)
    }

    // when user re-orders task rows, fire syncSortOrder
    gantt.attachEvent("onRowDragEnd", function (id, target) {
        syncSortOrder();
    });

    // auto-save for task open
    gantt.attachEvent("onTaskOpened", function (id) {
        var task = gantt.getTask(id);
        if (!task.reorder)
        {
                dp.setUpdateMode("off"); // temporarily disable auto-saving via dp
                task.open = true;
                gantt.updateTask(id);
                dp.sendData(); // manual call for dp update
                dp.setUpdateMode("cell"); // re-instate auto saving via dp
        }
    });

// auto-save for task close
    gantt.attachEvent("onTaskClosed", function (id) {
        var task = gantt.getTask(id);
        if (!task.reorder)
        {
            dp.setUpdateMode("off"); // temporarily disable auto-saving via dp
            task.open = false;
            gantt.updateTask(id);
            dp.sendData(); // manual call for dp update
            dp.setUpdateMode("cell"); // re-instate auto saving via dp
        }
    });

    // enable indent/outdent buttons on task selected; disable for root-level task
    gantt.attachEvent("onTaskSelected", function (id, item) {
        var task = gantt.getTask(id);
        if (task.order > 0) { // if the selected task is not the top task of the tree...
            if (task.parent != 0) { // if the selected task is not located at level 0 of the tree...
                $('#btnOutdent').prop('disabled', false);
            }
            else {
                $('#btnOutdent').prop('disabled', true);
            }
            var prevTaskId = gantt.getPrev(task.id);
            if (!gantt.isChildOf(task.id, prevTaskId)) { // if the previous task is not also the parent of the selected task
                $('#btnIndent').prop('disabled', false);
            }
            else {
                $('#btnIndent').prop('disabled', true);
            }
        }
        else {
            $('#btnOutdent').prop('disabled', true);
            $('#btnIndent').prop('disabled', true);
        }
    });

    function moveTaskChildren (id) {
        if (gantt.hasChild(id)) {
            var children = gantt.getChildren(id);
            for (var i = 0; i < children.length; i++) {
                gantt.moveTask(children[i], 1, id);
                moveTaskChildren(children[i]);
            }
        }
    }

    function indentTask() {
        dp.setUpdateMode("off"); // temporarily disable auto-saving via dp
        var selectedTaskId = gantt.getSelectedId();
        var selectedTask = gantt.getTask(selectedTaskId);
        var newParentId = gantt.getPrevSibling(selectedTaskId);
        var newParentTask = gantt.getTask(newParentId);
        var offset = selectedTask.order - newParentTask.order;
        gantt.moveTask(selectedTaskId, offset, newParentId);
        gantt.updateTask(selectedTaskId);
        dp.sendData();
        moveTaskChildren(selectedTaskId);
        dp.setUpdateMode("cell"); // re-enable auto-saving via dp
        gantt.open(newParentId);
        var prevTaskId = gantt.getPrev(selectedTaskId);
        if (gantt.isChildOf(selectedTaskId, prevTaskId)) { // if the previous task is not also the parent of the selected task
            $('#btnIndent').prop('disabled', true);
        }       
        $('#btnOutdent').prop('disabled', false);
        syncSortOrder();
    }

    function outdentTask() {
        dp.setUpdateMode("off"); // temporarily disable auto-saving via dp
        var selectedTaskId = gantt.getSelectedId();
        var selectedTask = gantt.getTask(selectedTaskId);
        var currentParentId = gantt.getParent(selectedTaskId);
        var offset = gantt.getTaskIndex(currentParentId) + 1;
        var newParentId = gantt.getParent(currentParentId);
        if (newParentId != 0) {
            offset = gantt.getTaskIndex(currentParentId) + 1;
        }
        gantt.moveTask(selectedTaskId, offset, newParentId);
        gantt.updateTask(selectedTaskId);
        dp.sendData();
        moveTaskChildren(selectedTaskId);
        dp.setUpdateMode("cell"); // re-enable auto-saving via dp
        if (newParentId != 0) {
            gantt.open(newParentId);
        }
        else {
            $('#btnOutdent').prop('disabled', true);
        }
        $('#btnIndent').prop('disabled', false);
        syncSortOrder();
    }

    // configure onAfterUpdate functions, which evaluate the 'mode' flag from the server side
    dp.attachEvent("onAfterUpdate", function(id, action, tid, response){
        switch(action) {
            case "inserted":
                if (response.attributes.mode.textContent == "tasks") // if the new record was a task...
                {
                    var task = gantt.getTask(tid);
                    if (task.parent) // ...and it has a parent...
                    {
                        gantt.open(task.parent); // ...open the parent, triggering the onTaskOpened event -> auto save (this is necessary because of squirelly open/close actions on the client side)...
                    }
                    syncSortOrder(); // ...then fire syncSortOrder
                    gantt.render();
                }
                break;
            case "deleted":
                if (response.attributes.mode.textContent == "tasks") // if the deleted record was a task, fire syncSortOrder
                {
                    syncSortOrder();
                    gantt.render();
                }
                break;
            default:
                break;
        }
    });

</script>

